Address: 100b0
Instruction: lui a0, 0x21

Type: U-type
Opcode: 0110111 (LUI)
Imm: 0x21 << 12 = 0x21000
Rd: a0 (x10)
32-bit Encoding: 00000000001000010110000110110111
Explanation: Load the upper 20 bits of the immediate 0x21 into a0's high-order bits.
Address: 100b4
Instruction: addi sp, sp, -16

Type: I-type
Opcode: 0010011 (ADDI)
Imm: -16 (signed immediate)
Rd: sp (x2)
Rs1: sp (x2)
32-bit Encoding: 11111111000000010010000010010011
Explanation: Add -16 to the value of sp, effectively adjusting the stack pointer for function call.
Address: 100b8
Instruction: sd a0, 8(sp)

Type: S-type
Opcode: 0100011 (SD)
Imm: 8 (split across imm[11:5] and imm[4:0])
Rs1: sp (x2)
Rs2: a0 (x10)
32-bit Encoding: 00000000101000010011001000100011
Explanation: Store the value of a0 at the address sp + 8.
Address: 100bc
Instruction: sd a1, 0(sp)

Type: S-type
Opcode: 0100011 (SD)
Imm: 0
Rs1: sp (x2)
Rs2: a1 (x11)
32-bit Encoding: 00000000001100010000001000100011
Explanation: Store the value of a1 at the address sp.
Address: 100c0
Instruction: call <__ctzdi2+0x48>

Type: J-type

Opcode: 1101111 (JAL)

Imm: Offset to <__ctzdi2+0x48>

Rd: ra (x1)

32-bit Encoding: Depends on <__ctzdi2+0x48> address.

Explanation: Jump to the subroutine <__ctzdi2+0x48>. Stores the return address in ra.

Address: 100c4
Instruction: ld a0, 8(sp)

Type: I-type
Opcode: 0000011 (LD)
Imm: 8
Rd: a0 (x10)
Rs1: sp (x2)
32-bit Encoding: 00000000100000010101000010000011
Explanation: Load the 64-bit value from sp + 8 into a0.
Address: 100c8
Instruction: addi sp, sp, 16

Type: I-type
Opcode: 0010011 (ADDI)
Imm: 16
Rd: sp (x2)
Rs1: sp (x2)
32-bit Encoding: 00000000001000010010000010010011
Explanation: Add 16 to sp, restoring the stack pointer after the function call.
Address: 100cc
Instruction: ret

Type: I-type
Opcode: 1100111 (JALR)
Imm: 0
Rd: x0
Rs1: ra (x1)
32-bit Encoding: 00000000000000000000000001100111
Explanation: Return from the function by jumping to the address in ra.
Address: 10100
Instruction: auipc a5, 0xfff

Type: U-type
Opcode: 0010111 (AUIPC)
Imm: 0xfff << 12 = 0xfff000
Rd: a5 (x15)
32-bit Encoding: 11111111111100000111000110110111
Explanation: Add 0xfff000 to the current PC value and store it in a5.
Address: 10140
Instruction: jal <main>

Type: J-type

Opcode: 1101111 (JAL)

Imm: Offset to <main>

Rd: ra (x1)

32-bit Encoding: Depends on <main> address.

Explanation: Jump to the main function. Stores the return address in ra.